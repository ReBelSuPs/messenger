{"version":3,"sources":["Message.js","firebase.js","App.js","index.js"],"names":["Message","props","isUser","message","user","className","text","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","setUser","messages","setMessages","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","key","ref","value","placeholder","onChange","e","target","type","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAgBeA,MAbf,SAAiBC,GACf,IAAMC,EAASD,EAAME,QAAQC,OAASH,EAAMG,KAE5C,OACE,yBACEC,UAAS,sBAAiBH,EAAS,eAAiB,oBAElDA,GAAU,2BAAID,EAAME,QAAQC,MAC9B,4BAAKH,EAAME,QAAQG,Q,gBCGVC,EAZKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,YCoDRC,MA3Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENhB,EAFM,KAEAmB,EAFA,OAGmBH,mBAAS,IAH5B,mBAGNI,EAHM,KAGIC,EAHJ,KAKPC,EAAiBC,iBAAO,MA+B9B,OAzBAC,qBAJuB,WACrBF,EAAeG,QAAQC,eAAe,CAAEC,SAAU,aAG1B,CAACP,IAE3BI,qBAAU,WACRrB,EAAGyB,WAAW,YACXC,QAAQ,YAAa,OACrBC,YAAW,SAACC,GACXV,EACEU,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAIpC,QAASmC,EAAIE,iBAG5D,IAEHZ,qBAAU,WACRL,EAAQkB,OAAO,sBACd,IAYD,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,sBACZmB,EAASa,KAAI,YAAsB,IAAnBE,EAAkB,EAAlBA,GAAIpC,EAAc,EAAdA,QACnB,OAAO,kBAAC,EAAD,CAASuC,IAAKH,EAAInC,KAAMA,EAAMD,QAASA,OAEhD,yBAAKwC,IAAKjB,KAEZ,0BAAMrB,UAAU,cACd,2BACEuC,MAAOvB,EACPwB,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOJ,QACnCK,KAAK,SAEP,4BAAQC,UAAW7B,EAAO4B,KAAK,SAASE,QAzB1B,SAACJ,GACnBA,EAAEK,iBACF7C,EAAGyB,WAAW,YAAYqB,IAAI,CAC5BjD,KAAMA,EACNE,KAAMe,EACNiC,UAAW9C,IAASU,UAAUqC,WAAWC,oBAE3ClC,EAAS,MAkBL,mBCpDRmC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e1d1575d.chunk.js","sourcesContent":["import React from 'react';\nimport './Message.css';\n\nfunction Message(props) {\n  const isUser = props.message.user === props.user;\n\n  return (\n    <div\n      className={`message-box ${isUser ? 'user-message' : 'others-message'}`}\n    >\n      {!isUser && <p>{props.message.user}</p>}\n      <h4>{props.message.text}</h4>\n    </div>\n  );\n}\n\nexport default Message;\n","import firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: 'AIzaSyCa18r722edHEzmnjZAJiEoTrhpWnN-UpQ',\n  authDomain: 'messenger-ecfb8.firebaseapp.com',\n  databaseURL: 'https://messenger-ecfb8.firebaseio.com',\n  projectId: 'messenger-ecfb8',\n  storageBucket: 'messenger-ecfb8.appspot.com',\n  messagingSenderId: '272183015103',\n  appId: '1:272183015103:web:8acc52b4c847e38008b80a',\n  measurementId: 'G-6WVP2MRCZV',\n});\n\nconst db = firebaseApp.firestore();\nexport default db;\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Message from './Message';\nimport firebase from 'firebase';\nimport db from './firebase';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [user, setUser] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  useEffect(() => {\n    db.collection('messages')\n      .orderBy('timestamp', 'asc')\n      .onSnapshot((snapshot) => {\n        setMessages(\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() }))\n        );\n      });\n  }, []);\n\n  useEffect(() => {\n    setUser(prompt('Enter your name'));\n  }, []);\n  const sendMessage = (e) => {\n    e.preventDefault();\n    db.collection('messages').add({\n      user: user,\n      text: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput('');\n  };\n\n  return (\n    <div className='App'>\n      <div className='messages-container'>\n        {messages.map(({ id, message }) => {\n          return <Message key={id} user={user} message={message}></Message>;\n        })}\n        <div ref={messagesEndRef}></div>\n      </div>\n      <form className='user-input'>\n        <input\n          value={input}\n          placeholder='Type a message'\n          onChange={(e) => setInput(e.target.value)}\n          type='text'\n        />\n        <button disabled={!input} type='submit' onClick={sendMessage}>\n          Send Message\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}